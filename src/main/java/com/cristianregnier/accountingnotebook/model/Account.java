package com.cristianregnier.accountingnotebook.model;


import lombok.Getter;

import java.math.BigDecimal;
import java.util.*;

public final class Account {

   @Getter
   private BigDecimal balance;

   private List<Transaction> history;

   public Account(BigDecimal balance) {
      if (balance == null)
         throw new IllegalArgumentException("Initial balance is required.");
      if (balance.compareTo(BigDecimal.ZERO) < 0)
         throw new IllegalArgumentException("Initial balance must be positive.");

      this.balance = balance;
      history = new ArrayList<>();
   }

   public Account() {
      this(BigDecimal.ZERO);
   }

   public Transaction credit(BigDecimal amount) {
      if (amount == null)
         throw new IllegalArgumentException("Amount to credit is required.");
      if (amount.compareTo(BigDecimal.ZERO) < 1)
         throw new IllegalArgumentException("Amount to credit must be more than zero.");

      return updateBalance(Transaction.Type.credit, amount);
   }

   public Transaction debit(BigDecimal amount) {
      if (amount == null)
         throw new IllegalArgumentException("Amount to debit is required.");
      if (amount.compareTo(BigDecimal.ZERO) < 1)
         throw new IllegalArgumentException("Amount to debit must be positive.");

      return updateBalance(Transaction.Type.debit, amount);
   }

   public List<Transaction> getHistory() {
      List<Transaction> unmodifHistory = new ArrayList(history.size());
      unmodifHistory.addAll(Collections.unmodifiableCollection(history));
      return unmodifHistory;
   }

   /**
    * Updates the account balance. Any update which leads to negative balance will be refused.
    *
    * @param amount Amount to add/substract from the balance
    * @return The transaction generated by the balance update
    */
   private Transaction updateBalance(Transaction.Type type, BigDecimal amount) {
      BigDecimal newBalance;
      if (Transaction.Type.credit == type)
         newBalance = balance.add(amount);
      else
         newBalance = balance.add(amount.multiply(BigDecimal.valueOf(-1L)));

      if (newBalance.compareTo(BigDecimal.ZERO) < 0)
         throw new IllegalStateException("Insufficient founds. Account Balance $" + balance + ".");
      else {
         balance = newBalance;
         Transaction newTransaction = new Transaction(UUID.randomUUID().toString(), type, amount, new Date());
         history.add(newTransaction);
         return newTransaction;
      }
   }

}
