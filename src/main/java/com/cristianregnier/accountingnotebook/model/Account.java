package com.cristianregnier.accountingnotebook.model;


import lombok.Getter;

import java.util.*;

public final class Account {

   @Getter
   private Double balance;

   private List<Transaction> history;

   public Account() {
      balance = 0D;
      history = new ArrayList<>();
   }

   public Transaction credit(Double amount) {
      if (amount == null)
         throw new IllegalArgumentException("Amount to credit is required.");
      if (!(amount > 0D))
         throw new IllegalArgumentException("Amount to credit must be more than zero.");

      return updateBalance(Transaction.Type.credit, amount);
   }

   public Transaction debit(Double amount) {
      if (amount == null)
         throw new IllegalArgumentException("Amount to debit is required.");
      if (!(amount > 0D))
         throw new IllegalArgumentException("Amount to debit must be positive.");

      return updateBalance(Transaction.Type.debit, amount * -1);
   }

   public List<Transaction> getHistory() {
      List<Transaction> unmodifHistory = new ArrayList(history.size());
      unmodifHistory.addAll(Collections.unmodifiableCollection(history));
      return unmodifHistory;
   }

   /**
    * Updates the account balance. Any update which leads to negative balance will be refused.
    *
    * @param amount Amount to add/substract from the balance
    * @return The transaction generated by the balance update
    */
   private Transaction updateBalance(Transaction.Type type, Double amount) {
      Double newBalance = balance + amount;

      if (newBalance < 0)
         throw new IllegalStateException("Insufficient founds. Account Balance $" + balance + ".");
      else {
         balance = newBalance;
         Transaction newTransaction = new Transaction(UUID.randomUUID().toString(), type, amount, new Date());
         history.add(newTransaction);
         return newTransaction;
      }
   }

}
